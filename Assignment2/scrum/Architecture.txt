# Please discuss your architectural decisions below.

High Level Architecture:

	MVC
	To keep the code simple, a partial MVC was implemented.
	
	Model
	The Model captures enough information to re-draw the sketch of
	the user.
	
	View+Controller
	There is a View class as well as a few, what we call, view components.
	The View class captures the Stage as well
	as containing all of its components.
	View components are meant to be contained in the main View.
	Examples of view components are PaintPanel and ShapeChooserPanel.
	
	The View class, and view components all implements their own controller.
	For example, the PaintPanel listens to its own MouseEvents.
	This is instead of separating out the Controller from the View. This choice
	was made to simplify the code, yet still keep it modular and clear.
	
	Each view component can see the containing View as well as the Model
	as appropriate. This means that each view component can speak to the
	other view components. An example of this is when the ShapeChooserPanel
	buttons are clicked, resulting in a mode change in the PaintPanel.
	
---------------------------------------------------------------------
TODO!!! Add in more architecture and discussion. For example, 
do you do something interesting to fix the association between the 
ShapeChooser and the PaintPanel? How about the PaintModel, something
is clearly wrong with it. Can you come up with a better architecture?
---------------------------------------------------------------------

DESIGN PATTERNS USED
	TODO!!! If you introduce a Design Pattern to solve a problem, 
	discuss it below. Only add design patterns if they simplify and improve
	the code. I see at least two that would greatly improve code. 
		
	Strategy: 
	liwill13: The strategy design pattern was used to remove the if block for mouse events and the methods associated to those mouse events
	orignally located in the paint panel. 
	First of all, the shapeBehaviour interface was created, and for each shape, a concrete shapebehaviour strategy was created 
	implementing the interface.
	Then, a context class was created containing a shapeBehaviour attribute. 
	When a mouse input is processed in the paint panel handle loop, a context object will have all its attributes set and 
	have a specific shapeBehaviour strategy installed. The specific shapeBehaviour strategy understands what will happen to the
	specific shape when a specific mouse input from paint panel is given (dragged, pressed etc.)
	Overall, this strategy allows use to add new shapes of our own by creating a new concrete shapeBehaviour strategy. This also
	keeps code simple because we do not need to scroll through blocks of code to find a specific block associated to a specific shape.
	We can simply fix/modify any bugs associated to a shape by fixing code within its own behaviour strategy.

	Command:
	arnejagu: Tried implementing Command design pattern for Bug8 so that it would work with colors and thickness but didn't have enough time
	to think of a implementation that could make the overall program more efficient. All the ways that I could think of implementing it would have 
	resulted in program becoming more inefficient. This is reason we did not implement Bug8

	Strategy:

	Command: 
	galegoer: Introduced this pattern to complete Bug7. The method behind it is repaint calls the operateAll method which executes all the commands in the 
	commandqueue located in the PaintModel class. The execute command is called from the Commands class (implemented from ShapeCommand) which finds out which
	instance the object is so it can then be drawn to the canvas. This helped to get rid of the arraylists for each individual object and instead we now have
	a single arraylist of commands.

	Singleton:
	Composite:
	Factory:
	Builder:
	Observer/Observable:
	... (any others you find useful) ...

OTHER ARCHITECTURE DISCUSSIONS
